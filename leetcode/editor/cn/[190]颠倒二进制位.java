//颠倒给定的 32 位无符号整数的二进制位。 
//
// 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -10737418
//25。 
// 
//
// 
//
// 进阶: 
//如果多次调用这个函数，你将如何优化你的算法？ 
//
// 
//
// 示例 1： 
//
// 
//输入: 00000010100101000001111010011100
//输出: 00111001011110000010100101000000
//解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。 
//
// 示例 2： 
//
// 
//输入：11111111111111111111111111111101
//输出：10111111111111111111111111111111
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。 
//
// 示例 1： 
//
// 
//输入：n = 00000010100101000001111010011100
//输出：964176192 (00111001011110000010100101000000)
//解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。 
//
// 示例 2： 
//
// 
//输入：n = 11111111111111111111111111111101
//输出：3221225471 (10111111111111111111111111111111)
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。 
//
// 
//
// 提示： 
//
// 
// 输入是一个长度为 32 的二进制字符串 
// 
// Related Topics 位运算 
// 👍 345 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
public class Solution {
    // 逐位颠倒法
    // you need treat n as an unsigned value
    /*public int reverseBits(int n) {
        // 用于记录反转数
        int rev = 0;
        // 在 n != 0 时，逐位进行运算
        for(int i = 0; i < 32 && n != 0; ++i) {
            // 截取 n 的二进制位的最后一位，左移（31 - i）格，（保留符号位）
            rev |= (n & 1) << (31 - i);
            // 由于 n 被截取了最后一位，故需将 n 无符号右移一位。
            n >>>= 1;
        }
        return rev;
    }*/

    // 位运算分治法

    private static final int M1 = 0x55555555; // 01010101010101010101010101010101
    private static final int M2 = 0x33333333; // 00110011001100110011001100110011
    private static final int M4 = 0x0f0f0f0f; // 00001111000011110000111100001111
    private static final int M8 = 0x00ff00ff; // 00000000111111110000000011111111

    public int reverseBits(int n) {
        // 将该 32 位进制数的相邻一位进行交换。
        n = n >>> 1 & M1 | (n & M1) << 1;
        // 将该 32 位进制数的相邻两位进行交换。
        n = n >>> 2 & M2 | (n & M2) << 2;
        // 将该 32 位进制数的相邻四位进行交换。
        n = n >>> 4 & M4 | (n & M4) << 4;
        // 将该 32 位进制数的相邻八位进行交换。
        n = n >>> 8 & M8 | (n & M8) << 8;
        // 将该 32 位进制数的相邻十六位进行交换。
        return n >>> 16 | n << 16;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
